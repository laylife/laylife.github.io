<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Random博客</title>
  
  <subtitle>自律的顶端是孤独</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guhan.site/"/>
  <updated>2020-05-18T00:51:53.141Z</updated>
  <id>http://guhan.site/</id>
  
  <author>
    <name>Random</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>create.js之接爱心小游戏</title>
    <link href="http://guhan.site/2019/08/29/create-js%E4%B9%8B%E6%8E%A5%E7%88%B1%E5%BF%83%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://guhan.site/2019/08/29/create-js之接爱心小游戏/</id>
    <published>2019-08-29T01:33:16.000Z</published>
    <updated>2020-05-18T00:51:53.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>CreateJS是基于HTML5开发的一套模块化的库和工具。基于这些库，可以非常快捷地开发出基于HTML5的游戏、动画和交互应用。</p><h5 id="EaseJs"><a href="#EaseJs" class="headerlink" title="EaseJs"></a>EaseJs</h5><p>EaselJS提供了一套完整的，层次化的显示列表的互动方式 来更简单的处理HTML5画布。</p><blockquote><p>JavaScript库提供的easeljs保留图形模式canvas包括一个完整的分级显示列表，一个核心的交互模型，和简化了canvas更容易的2D图形绘画。</p></blockquote><p>首先我们先看第一个知识点：<strong>Stage</strong></p><p>stage也叫舞台也是最大的根容器，在舞台上面可以显示所有对象。例如：</p><pre><code>//创建一个阶段，得到一个参考的画布var stage = new createjs.Stage(&quot;demoCanvas&quot;);//创建一个形状的显示对象var circle = new createjs.Shape();circle.graphics.beginFill(&quot;red&quot;).drawCircle(0, 0, 40);//形状实例的设置位置circle.x = circle.y = 50;//添加形状实例到舞台显示列表stage.addChild(circle);//更新阶段将呈现下一帧stage.update();</code></pre><p>该例子就是向舞台画了一个圆。更多详细知识点在：<a href="http://www.createjs.cc/src/docs/easeljs/classes/SpriteStage.html" target="_blank" rel="noopener">stage</a></p><a id="more"></a><p>再看一个知识点：<strong>Bitmap</strong></p><blockquote><p>位图表示显示列表中的图像、画布或视频。位图可以被实例化，使用现有的HTML元素，或一个字符串。</p></blockquote><p>如何使用呢？</p><pre><code>var bitmap = new createjs.Bitmap(&quot;imagePath.jpg&quot;);</code></pre><p>路径是绝对路径而不是相对路径。当然你还可以设置它放在舞台的那个位置、注册点、缩放等。<a href="http://www.createjs.cc/src/docs/easeljs/classes/Bitmap.html" target="_blank" rel="noopener">更多</a></p><p><strong>注意：</strong></p><ol><li>当一个字符串路径或图像标签是没有加载使用阶段可能需要之前，它会显示被重画。</li><li>加载的图像的交叉源会引发跨原点的安全性错误时，使用鼠标， 使用方法，如互动getObjectUnderPoint, 或使用过滤器，或缓存。你可以通过设置 crossOrigin 在传送到你的图像easeljs旗帜，如： img.crossOrigin=”Anonymous”;</li></ol><p>每一个被实例化的类，都可以添加事件，例如：</p><pre><code>bitmap.addEventListener(&quot;click&quot;, handleClick); function handleClick(event) {    // Click happened. }</code></pre><p>接下来就是开始我们今天写的小游戏：</p><p>游戏界面：</p><p><img src="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190829103537.png" alt="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190829103537.png"></p><p>结束游戏界面：</p><p><img src="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190829110038.png" alt="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190829110038.png"></p><p>自己封装了一下createjs函数，弄成了游戏函数库。废话不多说直接上代码：</p><pre><code>function Game(scoreSelector){            this.speed = 5;//默认速度            this.score = 0;//默认分数            this.scoreEl = document.querySelector(scoreSelector);            this.monster = [{                x: this.myRandom(35,160),                y: -50,                img: &quot;img/aixin.png&quot;,                speed: this.speed,                type: 1            },{                x: this.myRandom(260,420),                y: -50,                img: &quot;img/boom.png&quot;,                speed: this.speed,                type: 0            },{                x: this.myRandom(520,570),                y: -150,                img: &quot;img/aixin.png&quot;,                speed: this.speed,                type: 1            },{                x: this.myRandom(35,120),                y: -300,                img: &quot;img/boom.png&quot;,                speed: this.speed,                type: 0            },{                x: this.myRandom(220,380),                y: -400,                img: &quot;img/aixin.png&quot;,                speed: this.speed,                type: 1            },{                x: this.myRandom(480,570),                y: -450,                img: &quot;img/boom.png&quot;,                speed: this.speed,                type: 0            },            {                x: this.myRandom(35,160),                y: -600,                img: &quot;img/aixin.png&quot;,                speed: this.speed,                type: 1            },{                x: this.myRandom(260,420),                y: -700,                img: &quot;img/boom.png&quot;,                speed: this.speed,                type: 0            },{                x: this.myRandom(520,570),                y: -800,                img: &quot;img/aixin.png&quot;,                speed: this.speed,                type: 1            },{                x: this.myRandom(35,120),                y: -800,                img: &quot;img/boom.png&quot;,                speed: this.speed,                type: 0            }            ];            this.canEle = document.getElementById(&quot;canEle&quot;);//canvas画布            this.canW = 640;            this.canH = 1040;            this.stage = new createjs.Stage(&quot;canEle&quot;);            this.mancontainer = new createjs.Container();            this.score10 = new createjs.Bitmap(&quot;img/socre10.png&quot;);            this.man = new createjs.Bitmap(&quot;img/lanzi_boy2.png&quot;);;            this.mon = [];        }</code></pre><p>构造函数的代码。</p><pre><code>//初始化init: function(){    this.canEle.width = this.canW;    this.canEle.height = this.canH;    createjs.Ticker.timingMode = createjs.Ticker.RAF;    createjs.Touch.enable(this.stage);    createjs.Ticker.paused = false;                this.scoreEl.innerText = 0;    $(&quot;.againBtn&quot;).fadeOut();    this.drawMan();    this.drawScore10();    this.drawMonster();},</code></pre><p>初始化函数的代码。</p><pre><code>drawMan: function(){       this.mancontainer.setBounds(0,0,154,273);       //这个是注册点，这里我是以容器的中心为注册点，便于计算碰撞    this.mancontainer.regX = 77;    this.mancontainer.regY = 136.5;    this.mancontainer.x = 320;    this.mancontainer.y = 900;    this.man.x = 0;    this.man.y = 0;    this.mancontainer.addChild(this.man)       this.stage.addChild(this.mancontainer);       this.bindMove();   },</code></pre><p>这是画人物的代码。</p><pre><code>drawMonster: function(){                   var i, len = this.monster.length;                   var that = this;                   for (i = 0;i &lt; len;i++) {                       if(that.monster[i].type == 0){                        that.mon[i] = new createjs.Bitmap(that.monster[i].img);                        that.mon[i].x = that.monster[i].x;                        that.mon[i].y = that.monster[i].y;                        //这里的注册点也是以每个图片的中心                        that.mon[i].regX = 35;                        that.mon[i].regY = 44;                    }else{                        that.mon[i] = new createjs.Bitmap(that.monster[i].img);                        that.mon[i].x = that.monster[i].x;                        that.mon[i].y = that.monster[i].y;                        that.mon[i].regX = 35;                        that.mon[i].regY = 30.5;                    }                    that.mon[i].prop = that.monster[i];                    that.stage.addChild(that.mon[i]);                   }                   createjs.Ticker.addEventListener(&quot;tick&quot;, handleTick);                   function handleTick(event) {                     //圆圈将移动10个单位的权利。                     var i, len = that.monster.length;                     if(!event.paused){                         that.changeSpeed();                         for (i = 0;i &lt; len;i++) {                             that.mon[i].y += that.speed;                             if(that.mon[i].y &gt;= 1000){                                 that.mon[i].x = that.mon[i].prop.x;                                 that.mon[i].y = that.mon[i].prop.y;                             }                             //这里分为两种情况一个是炸弹一个是爱心                             if(that.mon[i].prop.type == 0){                                 //这是炸弹                                 //这里是计算是否碰撞，原理就是两个物体的x或y距离小于两个物体的宽之和的一半或高之和的一半；这里我并没有小于一半而是减少了，因为要掉到篮子里才算碰撞                                 if(Math.abs(that.mancontainer.y - that.mon[i].y) &lt;= 100.5 &amp;&amp; Math.abs(that.mancontainer.x - that.mon[i].x) &lt;= 105){                                     that.mon[i].x = that.mon[i].prop.x;                                     that.mon[i].y = that.mon[i].prop.y;                                     that.gameOver()                                 }                             }else{                                 //这是爱心                                 //原理同上                                 if(Math.abs(that.mancontainer.y - that.mon[i].y) &lt;= 67 &amp;&amp; Math.abs(that.mancontainer.x - that.mon[i].x) &lt;= 105){                                    that.score = that.score + 10;                                    createjs.Tween.get(that.score10).to({alpha:1}).wait(200).set({alpha:0})                                    that.scoreEl.textContent = that.score;                                     that.mon[i].x = that.mon[i].prop.x;                                     that.mon[i].y = that.mon[i].prop.y;                                 }                             }                         }                        that.stage.update();                     }                   }                   this.handleTick = handleTick;               },</code></pre><p>这是画炸弹和爱心的代码</p><pre><code>bindMove: function(){                       this.man.addEventListener(&quot;mousedown&quot;,function(e){                        console.log(e);                        var target = e.target;                        var parent = e.target.parent;                        target.first = {x: e.stageX - parent.x}                    })                     this.man.addEventListener(&quot;pressmove&quot;,function(e){                        var target = e.target;                        var parent = e.target.parent;                        if(e.stageX - target.first.x - 80&lt;=0){            //                console.log(&apos;left&apos;)                        }else if(e.stageX - target.first.x + 60&gt;=640){            //                console.log(&apos;right&apos;)                        }else{                            parent.x = e.stageX - target.first.x;                             target.first = {x: e.stageX - parent.x}                        }                    })               },</code></pre><p>这是人物移动的代码。</p><pre><code>changeSpeed: function(){                   if(this.score &gt; 50 &amp;&amp; this.score &lt;= 100){                    this.speed = 6;                }else if(this.score &gt; 100 &amp;&amp; this.score &lt;= 200){                    this.speed = 7;                }else if(this.score &gt; 200 &amp;&amp; this.score &lt;= 300){                    this.speed = 8;                }else if(this.score &gt; 300 &amp;&amp; this.score &lt;= 400){                    this.speed = 9;                }else if(this.score &gt; 400 &amp;&amp; this.score &lt;= 500){                    this.speed = 10;                }else if(this.score &gt; 500 &amp;&amp; this.score &lt;= 600){                    this.speed = 11;                }else if(this.score &gt; 600 &amp;&amp; this.score &lt;= 700){                    this.speed = 12;                }else if(this.score &gt; 700 &amp;&amp; this.score &lt;= 800){                    this.speed = 13;                }else if(this.score &gt; 800 &amp;&amp; this.score &lt;= 900){                    this.speed = 14;                }else if(this.score &gt; 900){                    this.speed = 16;                }               },</code></pre><p>这是改变下落速度的代码。</p><pre><code>gameOver: function(){                   createjs.Ticker.paused = true;                   this.stage.removeAllChildren();                   createjs.Ticker.removeEventListener(&quot;tick&quot;, this.handleTick);                 this.stage.update();                 $(&quot;.gameoverOutWrapper&quot;).fadeIn();                 $(&quot;.scoreNum&quot;).text(this.score);                 this.speed = 5;//默认速度                this.score = 0;//默认分数               }</code></pre><p>这是游戏结束的代码。</p><p>最后附上源码。如果觉得不错的话给个star! <a href="https://github.com/laylife/receiving-love-game" target="_blank" rel="noopener">receiving-love-game</a>;</p><p>demo演示地址：<a href="http://guhan.site/receiving_love/index.html">接爱心小游戏</a></p><h5 id="TweenJs"><a href="#TweenJs" class="headerlink" title="TweenJs"></a>TweenJs</h5><p>TweenJS类库主要用来调整和动画HTML5和Javascript属性。提供了简单并且强大的tweening接口。<a href="http://www.createjs.cc/src/docs/tweenjs/modules/TweenJS.html" target="_blank" rel="noopener">更多</a></p><h5 id="SoundJs"><a href="#SoundJs" class="headerlink" title="SoundJs"></a>SoundJs</h5><p>SoundJS提供了简单而强大的API来处理音频。通过插件来执行实际的音频实现，无需学习平台相关的知识，简单直接的处理声音。<a href="http://www.createjs.cc/src/docs/soundjs/modules/SoundJS.html" target="_blank" rel="noopener">更多</a></p><h5 id="PreloadJs"><a href="#PreloadJs" class="headerlink" title="PreloadJs"></a>PreloadJs</h5><p>PreloadJS是一个用来管理和协调相关资源加载的类库，它可以方便的帮助你预先加载相关资源，例如：图片、文件、音频、数据等等。<a href="http://www.createjs.cc/src/docs/preloadjs/modules/PreloadJS.html" target="_blank" rel="noopener">更多</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;CreateJS是基于HTML5开发的一套模块化的库和工具。基于这些库，可以非常快捷地开发出基于HTML5的游戏、动画和交互应用。&lt;/p&gt;
&lt;h5 id=&quot;EaseJs&quot;&gt;&lt;a href=&quot;#EaseJs&quot; class=&quot;headerlink&quot; title=&quot;EaseJs&quot;&gt;&lt;/a&gt;EaseJs&lt;/h5&gt;&lt;p&gt;EaselJS提供了一套完整的，层次化的显示列表的互动方式 来更简单的处理HTML5画布。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript库提供的easeljs保留图形模式canvas包括一个完整的分级显示列表，一个核心的交互模型，和简化了canvas更容易的2D图形绘画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先我们先看第一个知识点：&lt;strong&gt;Stage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;stage也叫舞台也是最大的根容器，在舞台上面可以显示所有对象。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//创建一个阶段，得到一个参考的画布
var stage = new createjs.Stage(&amp;quot;demoCanvas&amp;quot;);
//创建一个形状的显示对象
var circle = new createjs.Shape();
circle.graphics.beginFill(&amp;quot;red&amp;quot;).drawCircle(0, 0, 40);
//形状实例的设置位置
circle.x = circle.y = 50;
//添加形状实例到舞台显示列表
stage.addChild(circle);
//更新阶段将呈现下一帧
stage.update();&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该例子就是向舞台画了一个圆。更多详细知识点在：&lt;a href=&quot;http://www.createjs.cc/src/docs/easeljs/classes/SpriteStage.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;stage&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="create.js" scheme="http://guhan.site/categories/create-js/"/>
    
    
      <category term="Javascript" scheme="http://guhan.site/tags/Javascript/"/>
    
      <category term="create.js" scheme="http://guhan.site/tags/create-js/"/>
    
  </entry>
  
  <entry>
    <title>Javascript之XMLHttpRequest</title>
    <link href="http://guhan.site/2019/08/26/Javascript%E4%B9%8BXMLHttpRequest/"/>
    <id>http://guhan.site/2019/08/26/Javascript之XMLHttpRequest/</id>
    <published>2019-08-26T06:17:10.000Z</published>
    <updated>2020-05-18T00:51:53.140Z</updated>
    
    <content type="html"><![CDATA[<h4 id="XMLHtttpRequest对象"><a href="#XMLHtttpRequest对象" class="headerlink" title="XMLHtttpRequest对象"></a>XMLHtttpRequest对象</h4><pre><code>var xMLHttpRequest = new XMLHttpRequest();</code></pre><h5 id="XMLHttpRequest用法"><a href="#XMLHttpRequest用法" class="headerlink" title="XMLHttpRequest用法"></a>XMLHttpRequest用法</h5><p>第一个方法是 open()，它接受 3 个参数：要发送的请求的类型（”get”、”post”等）、请求的 URL 和表示是否异步发送请求的布尔值。下面就是调用这个方法的例子。</p><pre><code>xMLHttpRequest.open(&apos;post&apos;,&apos;http://10.96.77.117:80/compress/upload&apos;,false);</code></pre><p>这行代码，需要说明两点：一是 URL相对于执行代码的当前页面（当然也可以使用绝对路径）；二是调用 open()方法并不会真正发送请求，而只是启动一个请求以备发送。</p><p>要发送特定的请求，必须像下面这样调用 send()方法：</p><pre><code>xMLHttpRequest.send(null);</code></pre><p>这里的 send()方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送数据，则必须传入 null，因为这个参数对有些浏览器来说是必需的。调用 send()之后，请求就会被分派到服务器。</p><a id="more"></a><p>由于这次请求是同步的，JavaScript 代码会等到服务器响应之后再继续执行。在收到响应后，响应的数据会自动填充 XHR 对象的属性，相关的属性简介如下。</p><ol><li>responseText：作为响应主体被返回的文本。</li><li>responseXML：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将保存包含着响应数据的 XML DOM 文档。</li><li>status：响应的 HTTP 状态。</li><li>statusText：HTTP 状态的说明。</li></ol><p><img src="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190826143109.png" alt="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190826143109.png"></p><p>根据返回的状态代码，这个例子可能会显示由服务器返回的内容，也可能会显示一条错误消息。我们建议读者要通过检测 status 来决定下一步的操作，不要依赖 statusText，因为后者在跨浏览器使用时不太可靠。另外，无论内容类型是什么，响应主体的内容都会保存到 responseText 属性中；而对于非 XML 数据而言，responseXML 属性的值将为 null。</p><pre><code>// 上传完成后的回调函数        xMLHttpRequest.onload = function () {          console.log(xMLHttpRequest);          if(xMLHttpRequest.status == 200){              var data = JSON.parse(xMLHttpRequest.response);              if(data.code == 1){                  alert(data.msg)              }          }        };</code></pre><h5 id="POST请求之数据"><a href="#POST请求之数据" class="headerlink" title="POST请求之数据"></a>POST请求之数据</h5><p>通常我们提交表单的时候会使用一些封装好的插件或者表单提交，但是原生的ajax是如何提交数据的呢？FormData类型为序列化表单以及创建与表单格式相同的数据（用于通过 XHR 传输）提供了便利。</p><pre><code>var formData = new FormData();for(var i = 0;i&lt;fileBuffer.length;i++){    formData.append(&apos;upload&apos;,fileBuffer[i]);    // data[&apos;file&apos;+i] = fileBuffer[i]}</code></pre><p>这个 append()方法接收两个参数：键和值，分别对应表单字段的名字和字段中包含的值。可以像上面代码示例这样添加任意多个键值对儿。</p><pre><code>xMLHttpRequest.send(formData);</code></pre><h4 id="XMLHttpRequest对象包含的进度事件"><a href="#XMLHttpRequest对象包含的进度事件" class="headerlink" title="XMLHttpRequest对象包含的进度事件"></a>XMLHttpRequest对象包含的进度事件</h4><p>load事件：</p><pre><code>var xhr = new XMLHttpRequest(); xhr.onload = function(){  if ((xhr.status &gt;= 200 &amp;&amp; xhr.status &lt; 300) || xhr.status == 304){  alert(xhr.responseText);  } else {  alert(&quot;Request was unsuccessful: &quot; + xhr.status);  } }; xhr.open(&quot;get&quot;, &quot;altevents.php&quot;, true); xhr.send(null);</code></pre><p>progress事件：</p><p>onprogress 事件处理程序会接收到一个 event 对象，其 target 属性是 XHR 对象，但包含着三个额外的属性：lengthComputable、loaded 和 total。其中，lengthComputable是一个表示进度信息是否可用的布尔值，loaded 表示已经接收的字节数，total 表示根据<br>Content-Length 响应头部确定的预期字节数。</p><p><img src="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190826144649.png" alt="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/20190826144649.png"></p><pre><code>// 获取上传进度xhr.upload.onprogress = function (event) {  if (event.lengthComputable) {    var percent = Math.floor(event.loaded / event.total * 100) ;    progress.textContent = percent;    // 设置进度显示  }};</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;XMLHtttpRequest对象&quot;&gt;&lt;a href=&quot;#XMLHtttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;XMLHtttpRequest对象&quot;&gt;&lt;/a&gt;XMLHtttpRequest对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var xMLHttpRequest = new XMLHttpRequest();&lt;/code&gt;&lt;/pre&gt;&lt;h5 id=&quot;XMLHttpRequest用法&quot;&gt;&lt;a href=&quot;#XMLHttpRequest用法&quot; class=&quot;headerlink&quot; title=&quot;XMLHttpRequest用法&quot;&gt;&lt;/a&gt;XMLHttpRequest用法&lt;/h5&gt;&lt;p&gt;第一个方法是 open()，它接受 3 个参数：要发送的请求的类型（”get”、”post”等）、请求的 URL 和表示是否异步发送请求的布尔值。下面就是调用这个方法的例子。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xMLHttpRequest.open(&amp;apos;post&amp;apos;,&amp;apos;http://10.96.77.117:80/compress/upload&amp;apos;,false);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这行代码，需要说明两点：一是 URL相对于执行代码的当前页面（当然也可以使用绝对路径）；二是调用 open()方法并不会真正发送请求，而只是启动一个请求以备发送。&lt;/p&gt;
&lt;p&gt;要发送特定的请求，必须像下面这样调用 send()方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xMLHttpRequest.send(null);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 send()方法接收一个参数，即要作为请求主体发送的数据。如果不需要通过请求主体发送数据，则必须传入 null，因为这个参数对有些浏览器来说是必需的。调用 send()之后，请求就会被分派到服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://guhan.site/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://guhan.site/tags/Javascript/"/>
    
      <category term="Web前端" scheme="http://guhan.site/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Javascript之File Api</title>
    <link href="http://guhan.site/2019/08/26/Javascript%E4%B9%8BFile-Api/"/>
    <id>http://guhan.site/2019/08/26/Javascript之File-Api/</id>
    <published>2019-08-26T02:46:01.000Z</published>
    <updated>2020-05-18T00:58:20.820Z</updated>
    
    <content type="html"><![CDATA[<h4 id="File-Api"><a href="#File-Api" class="headerlink" title="File Api"></a>File Api</h4><blockquote><p>File API（文件 API）的宗旨是为 Web 开发人员提供一种安全的方式，以便在客户端访问用户计算机中的文件，并更好地对这些文件执行操作。</p></blockquote><p>File API 在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5 在<br>DOM 中为文件输入元素添加了一个 files 集合。在通过文件输入字段选择了一或多个文件时，files<br>集合中将包含一组 File 对象，每个 File 对象对应着一个文件。每个 File 对象都有下列只读属性。</p><ol><li>name:本地文件系统中的文件名</li><li>size:文件的字节大小</li><li>type:字符串，文件的MIME类型</li><li>laseModifiedDare:字符串，文件上一次被修改的时间</li></ol><p>Example:</p><pre><code>var uploadFile = document.querySelector(&apos;.uploadFile&apos;);uploadFile.addEventListener(&apos;change&apos;, function(event){        console.log(event);        fileBuffer = event.target.files;        if(event.target.files.length&gt;=1){            for(var i = 0;i&lt;event.target.files.length;i++){                 var fileReader = new FileReader();                 new Promise((resolve,reject)=&gt;{                 fileReader.readAsDataURL(event.target.files[i]);                 fileReader.onload = function(){                        console.log(fileReader.result);                         resolve(fileBuffer.push(this.result))                     }                     fileReader.onerror = function(){                         reject(i + &apos;张读取出错&apos;);                     }                 })            }        }    })</code></pre><p>这个例子中加入Promise是为了顺序读取，因为FileReader Api是异步的。</p><a id="more"></a><h4 id="FileReader类型"><a href="#FileReader类型" class="headerlink" title="FileReader类型"></a>FileReader类型</h4><p>FileReader类型实现的是一种异步文件读取机制。可以把FileReader想象成XMLHttpRequest，<br>区别只是它读取的是文件系统，而不是远程服务器。为了读取文件中的数据，FileReader 提供了如下<br>几个方法。</p><ol><li>readAsText(file,encoding)：以纯文本形式读取文件，将读取到的文本保存在 result 属性中。第二个参数用于指定编码类型，是可选的。</li><li>readAsDataURL(file)：读取文件并将文件以数据 URI 的形式保存在 result 属性中。(生成base64位)</li><li>readAsBinaryString(file)：读取文件并将一个字符串保存在 result 属性中，字符串中的每个字符表示一字节。</li><li> readAsArrayBuffer(file)：读取文件并将一个包含文件内容的 ArrayBuffer 保存在result 属性中。</li></ol><p>这些读取文件的方法为灵活地处理文件数据提供了极大便利。例如，可以读取图像文件并将其保存为数据 URI，以便将其显示给用户，或者为了解析方便，可以将文件读取为文本形式。这就可以实现本地上传图片并预览的效果。</p><p>由于读取过程是异步的，因此 FileReader 也提供了几个事件。其中最有用的三个事件是progress、error 和 load，分别表示是否又读取了新数据、是否发生了错误以及是否已经读完了整个文件。</p><pre><code>fileReader.onload = function(e){}fileReader.onerror = function(e){}fileReader.onprogress = function(e){}</code></pre><h4 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h4><p>与拖放一张图片或者一个链接类似，从桌面上把文件拖放到浏览器中也会触发 drop 事件。而且可以在 event.dataTransfer. files中读取到被放置的文件，当然此时它是一个 File 对象，与通过文件输入字段取得的 File 对象一样。</p><p>Example:</p><pre><code>&lt;input type=&quot;file&quot; class=&quot;uploadFile&quot; name=&quot;upload2&quot; multiple=&quot;multiple&quot;&gt;var uploadFile = document.querySelector(&apos;.uploadFile&apos;);//放下事件uploadFile.addEventListener(&apos;drop&apos;, function(e){        console.log(e);    })//开始拖拽uploadFile.addEventListener(&apos;dragstart&apos;, function(e){        console.log(e);    })//拖拽经过uploadFile.addEventListener(&apos;dragover&apos;, function(e){        console.log(e);    })//拖拽进入uploadFile.addEventListener(&apos;dragenter&apos;, function(e){        console.log(e);    })</code></pre><p>可以通过 e.dataTransfer.files或者通过e.target.files读取文件信息。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;File-Api&quot;&gt;&lt;a href=&quot;#File-Api&quot; class=&quot;headerlink&quot; title=&quot;File Api&quot;&gt;&lt;/a&gt;File Api&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;File API（文件 API）的宗旨是为 Web 开发人员提供一种安全的方式，以便在客户端访问用户计算机中的文件，并更好地对这些文件执行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;File API 在表单中的文件输入字段的基础上，又添加了一些直接访问文件信息的接口。HTML5 在&lt;br&gt;DOM 中为文件输入元素添加了一个 files 集合。在通过文件输入字段选择了一或多个文件时，files&lt;br&gt;集合中将包含一组 File 对象，每个 File 对象对应着一个文件。每个 File 对象都有下列只读属性。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;name:本地文件系统中的文件名&lt;/li&gt;
&lt;li&gt;size:文件的字节大小&lt;/li&gt;
&lt;li&gt;type:字符串，文件的MIME类型&lt;/li&gt;
&lt;li&gt;laseModifiedDare:字符串，文件上一次被修改的时间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var uploadFile = document.querySelector(&amp;apos;.uploadFile&amp;apos;);
uploadFile.addEventListener(&amp;apos;change&amp;apos;, function(event){
        console.log(event);
        fileBuffer = event.target.files;
        if(event.target.files.length&amp;gt;=1){
            for(var i = 0;i&amp;lt;event.target.files.length;i++){
                 var fileReader = new FileReader();
                 new Promise((resolve,reject)=&amp;gt;{
                 fileReader.readAsDataURL(event.target.files[i]);
                 fileReader.onload = function(){
                        console.log(fileReader.result);
                         resolve(fileBuffer.push(this.result))

                     }
                     fileReader.onerror = function(){
                         reject(i + &amp;apos;张读取出错&amp;apos;);

                     }
                 })

            }
        }


    })&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个例子中加入Promise是为了顺序读取，因为FileReader Api是异步的。&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://guhan.site/categories/Javascript/"/>
    
      <category term="JS" scheme="http://guhan.site/categories/Javascript/JS/"/>
    
    
      <category term="Javascript" scheme="http://guhan.site/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript之函数表达式的理解</title>
    <link href="http://guhan.site/2019/08/22/Javascript%E4%B9%8B%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://guhan.site/2019/08/22/Javascript之函数表达式的理解/</id>
    <published>2019-08-22T06:18:47.000Z</published>
    <updated>2020-05-18T00:51:53.140Z</updated>
    
    <content type="html"><![CDATA[<h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><p>Javascript中定义函数的方式有两种：</p><p>1.<strong>函数声明</strong>的方式</p><p>语法如下：</p><pre><code>function functionName(arg0, arg1, arg2) {  //函数体}</code></pre><p>这种定义方式有一个特性就是<strong>函数声明提升</strong>，意思是在执行代码之前会先读取函数声明。这意味着可以把函数声明放在调用它语句的后面。</p><pre><code>sayHi(); function sayHi(){      alert(&quot;Hi!&quot;); }</code></pre><p>2.<strong>函数表达式</strong>的方式声明函数</p><pre><code>var functionName = function(arg0, arg1, arg2){  //函数体};</code></pre><p>这种形式看起来好像是常规的变量赋值语句，即创建一个函数并将它赋值给变量 functionName。这种情况下创建的函数叫做匿名函数（anonymous function），因为 function 关键字后面没有标识符。</p><p>函数表达式与其他表达式一样，在使用前必须先赋值。以下代码会导致错误。</p><pre><code>sayHi(); //错误：函数还不存在var sayHi = function(){  alert(&quot;Hi!&quot;); };</code></pre> <a id="more"></a><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归函数是在一个函数通过名字调用自身的情况下构成的，如下所示。</p><pre><code>function factorial(num){      if (num &lt;= 1){          return 1;          } else {          return num * factorial(num-1);      } }</code></pre><p>虽然这个函数表面看来没什么问题，但下面的代码却可能导致它出错。</p><pre><code>var anotherFactorial = factorial; factorial = null; alert(anotherFactorial(4)); //出错！</code></pre><p>以上代码先把 factorial()函数保存在变量 anotherFactorial 中，然后将 factorial 变量设置为 null，结果指向原始函数的引用只剩下一个。但在接下来调用 anotherFactorial()时，由于必须执行 factorial()，而 factorial 已经不再是函数，所以就会导致错误。在这种情况下，使用 arguments.callee 可以解决这个问题。我们知道，arguments.callee 是一个指向正在执行的函数的指针，因此可以用它来实现对函数的递归调用，例如：</p><pre><code>function factorial(num){  if (num &lt;= 1){  return 1;  } else {  return num * arguments.callee(num-1);  } }</code></pre><p>通过使用 arguments.callee 代替函数名，可以确保无论怎样调用函数都不会出问题。因此，在编写递归函数时，使用 arguments.callee 总比使用函数名更保险。</p><p>但在严格模式下，不能通过脚本访问 arguments.callee，访问这个属性会导致错误。不过，可以使用命名函数表达式来达成相同的结果。例如：</p><pre><code>var factorial = (function f(num){  if (num &lt;= 1){  return 1;  } else { return num * f(num-1);  } });</code></pre><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数。</p></blockquote><p>创建闭包的常见方式，就是在一个函数内部创建另一个函数，仍以前面的createComparisonFunction()函数为例：</p><pre><code>function createComparisonFunction(propertyName) {  return function(object1, object2){  var value1 = object1[propertyName];  var value2 = object2[propertyName];  if (value1 &lt; value2){  return -1;  } else if (value1 &gt; value2){  return 1;  } else {  return 0;  }  }; }</code></pre><p>在这个例子中，突出的那两行代码是内部函数（一个匿名函数）中的代码，这两行代码访问了外部函数中的变量 propertyName。即使这个内部函数被返回了，而且是在其他地方被调用了，但它仍然可以访问变量 propertyName。之所以还能够访问这个变量，是因为内部函数的作用域链中包含createComparisonFunction()的作用域。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;函数表达式&quot;&gt;&lt;a href=&quot;#函数表达式&quot; class=&quot;headerlink&quot; title=&quot;函数表达式&quot;&gt;&lt;/a&gt;函数表达式&lt;/h4&gt;&lt;p&gt;Javascript中定义函数的方式有两种：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;函数声明&lt;/strong&gt;的方式&lt;/p&gt;
&lt;p&gt;语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function functionName(arg0, arg1, arg2) { 
 //函数体
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种定义方式有一个特性就是&lt;strong&gt;函数声明提升&lt;/strong&gt;，意思是在执行代码之前会先读取函数声明。这意味着可以把函数声明放在调用它语句的后面。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sayHi(); 
function sayHi(){ 
     alert(&amp;quot;Hi!&amp;quot;); 
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.&lt;strong&gt;函数表达式&lt;/strong&gt;的方式声明函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var functionName = function(arg0, arg1, arg2){ 
 //函数体
};&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种形式看起来好像是常规的变量赋值语句，即创建一个函数并将它赋值给变量 functionName。这种情况下创建的函数叫做匿名函数（anonymous function），因为 function 关键字后面没有标识符。&lt;/p&gt;
&lt;p&gt;函数表达式与其他表达式一样，在使用前必须先赋值。以下代码会导致错误。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sayHi(); //错误：函数还不存在
var sayHi = function(){ 
 alert(&amp;quot;Hi!&amp;quot;); 
};&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://guhan.site/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://guhan.site/tags/Javascript/"/>
    
      <category term="web前端" scheme="http://guhan.site/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://guhan.site/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Javascript之面向对象</title>
    <link href="http://guhan.site/2019/08/22/Javascript%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://guhan.site/2019/08/22/Javascript之面向对象/</id>
    <published>2019-08-22T02:23:05.000Z</published>
    <updated>2020-05-18T00:51:53.141Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><pre><code>虽然 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。</code></pre><h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><pre><code>function createPerson(name, age, job){    var o = new Object();          o.name = name;          o.age = age;          o.job = job;          o.sayName = function(){          alert(this.name);      };     return o; } var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); var person2 = createPerson(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</code></pre><p>函数 <strong>createPerson()</strong>能够根据接受的参数来构建一个包含所有必要信息的 <strong>Person</strong> 对象。可以无数次地调用这个函数，而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p>  <a id="more"></a><h4 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h4><p>自定义构造函数例子如下：</p><pre><code>function Person(name, age, job){      this.name = name;      this.age = age;      this.job = job;      this.sayName = function(){      alert(this.name);      }; } var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</code></pre><p>在这个例子中，<strong>Person()</strong>函数取代了 <strong>createPerson()</strong>函数。我们注意到，<strong>Person()</strong>中的代码<br>除了与工厂模式 <strong>createPerson()</strong>中相同的部分外，还存在以下不同之处：</p><ul><li>没有显式地创建对象；</li><li>直接将属性和方法赋给了 this 对象；</li><li>没有 return 语句。</li></ul><p>构造函数的的函数名首字母是大写，例如在本例子中为<strong>P</strong></p><h5 id="1-将构造函数当做函数"><a href="#1-将构造函数当做函数" class="headerlink" title="1. 将构造函数当做函数"></a>1. 将构造函数当做函数</h5><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不<br>存在定义构造函数的特殊语法。任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；而<br>任何函数，如果不通过 new 操作符来调用，那它跟普通函数也不会有什么两样。例如，前面例子中定义<br>的 Person()函数可以通过下列任何一种方式来调用。</p><pre><code>// 当作构造函数使用var person = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); person.sayName(); //&quot;Nicholas&quot; // 作为普通函数调用Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;); // 添加到 window window.sayName(); //&quot;Greg&quot; // 在另一个对象的作用域中调用var o = new Object(); Person.call(o, &quot;Kristen&quot;, 25, &quot;Nurse&quot;); o.sayName(); //&quot;Kristen&quot;</code></pre><h5 id="2-构造函数的问题"><a href="#2-构造函数的问题" class="headerlink" title="2. 构造函数的问题"></a>2. 构造函数的问题</h5><p>构造函数模式虽然好用，但也并非没有缺点。使用构造函数的主要问题，就是每个方法都要在每个<br>实例上重新创建一遍。虽然也可以用全局函数这个方法解决这个问题：</p><pre><code>function Person(name, age, job){      this.name = name;      this.age = age;      this.job = job;      this.sayName = sayName; } function sayName(){      alert(this.name); } var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;); var person2 = new Person(&quot;Greg&quot;, 27, &quot;Doctor&quot;);</code></pre><p>但是在这个例子中，我们把 sayName()函数的定义转移到了构造函数外部。而在构造函数内部，我们将 sayName 属性设置成等于全局的 sayName 函数。这样一来，由于 sayName 包含的是一个指向函数的指针，因此 person1 和 person2 对象就共享了在全局作用域中定义的同一个 sayName()函数。这样做确实解决了两个函数做同一件事的问题，可是新问题又来了：在全局作用域中定义的函数实际上只能被某个对象调用，这让全局作用域有点名不副实。而更让人无法接受的是：如果对象需要定义很多方法，那么就要定义很多个全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。所以才有了我们的原型模式</p><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><p>我们创建的每个函数都有原型(<strong>prototype</strong>)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中，如下面的例子所示。</p><pre><code>function Person(){ } Person.prototype.name = &quot;Nicholas&quot;; Person.prototype.age = 29; Person.prototype.job = &quot;Software Engineer&quot;; Person.prototype.sayName = function(){      alert(this.name); }; var person1 = new Person(); person1.sayName(); //&quot;Nicholas&quot; var person2 = new Person();person2.sayName(); //&quot;Nicholas&quot; alert(person1.sayName == person2.sayName); //true</code></pre><p>在此，我们将 sayName()方法和所有属性直接添加到了 Person 的 prototype 属性中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法。<strong>但与构造函数模式不同的是，新对象的这些属性和方法是由所有实例共享的</strong>。换句话说，person1 和 person2 访问的都是同一组属性和同一个 sayName()函数。<br>                                         <img src="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/1-1.png" alt="http://mat1.gtimg.com/hn/cp/lol/20190822javascript/1-1.png"></p><p>该图展示了 Person 构造函数、Person 的原型属性以及 Person 现有的两个实例之间的关系。在此，Person.prototype 指向了原型对象，而 Person.prototype.constructor 又指回了 Person。原型对象中除了包含 constructor 属性之外，还包括后来添加的其他属性。Person 的每个实例——person1 和 person2 都包含一个内部属性，该属性仅仅指向了 Person.prototype；换句话说，它们与构造函数没有直接的关系。此外，要格外注意的是，虽然这两个实例都不包含属性和方法，但我们却可以调用 person1.sayName()。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建对象&quot;&gt;&lt;a href=&quot;#创建对象&quot; class=&quot;headerlink&quot; title=&quot;创建对象&quot;&gt;&lt;/a&gt;创建对象&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;虽然 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;function createPerson(name, age, job){
    var o = new Object(); 
         o.name = name; 
         o.age = age; 
         o.job = job; 
         o.sayName = function(){ 
         alert(this.name); 
     }; 
    return o; 
} 
var person1 = createPerson(&amp;quot;Nicholas&amp;quot;, 29, &amp;quot;Software Engineer&amp;quot;); 
var person2 = createPerson(&amp;quot;Greg&amp;quot;, 27, &amp;quot;Doctor&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数 &lt;strong&gt;createPerson()&lt;/strong&gt;能够根据接受的参数来构建一个包含所有必要信息的 &lt;strong&gt;Person&lt;/strong&gt; 对象。可以无数次地调用这个函数，而每次它都会返回一个包含三个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）&lt;/p&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://guhan.site/categories/Javascript/"/>
    
      <category term="web前端" scheme="http://guhan.site/categories/Javascript/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://guhan.site/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack</title>
    <link href="http://guhan.site/2019/08/16/webpack/"/>
    <id>http://guhan.site/2019/08/16/webpack/</id>
    <published>2019-08-16T09:16:57.000Z</published>
    <updated>2020-05-18T00:51:53.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">原文链接</a></p><p><em>webpack</em>是一个<em>Javascript</em>应用程序的静态模块打包器。</p><p>先理解<strong>四个概念</strong>：</p><ul><li>入口（entry）</li><li>输出（output）</li><li>loader</li><li>插件（plugins）</li></ul><h2 id="入口-entry"><a href="#入口-entry" class="headerlink" title="入口(entry)"></a>入口(entry)</h2><p>入口起点指示<em>webpack</em>应该使用哪个模块，作为其构建内部<em>依赖图</em>的开始。</p><p><strong>webpack.config.js</strong></p><pre><code>module.exports = {      entry: &apos;./path/to/my/entry/file.js&apos;};</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.webpackjs.com/concepts/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="webpack" scheme="http://guhan.site/tags/webpack/"/>
    
  </entry>
  
</feed>
